<#
.SYNOPSIS
Controls visibility of the process window.

.LINK
https://github.com/krcs/Powershell-Scripts

https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-showwindow
https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setforegroundwindow
https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowpos

#>
param (
    [Parameter(Mandatory, HelpMessage="Process name.")]
    [string]$Name,
    [Parameter(HelpMessage="Sets the specified window's show state.")]
    [ValidateSet(
        'SW_HIDE',
        'SW_NORMAL',
        'SW_SHOWMINIMIZED',
        'SW_MAXIMIZE',
        'SW_SHOWNOACTIVATE',
        'SW_SHOW',
        'SW_MINIMIZE',
        'SW_SHOWMINNOACTIVE',
        'SW_SHOWNA',
        'SW_RESTORE',
        'SW_SHOWDEFAULT',
        'SW_FORCEMINIMIZE'
    )]
    [string]$ShowWindow,
    [Parameter(HelpMessage="Brings the thread that created the specified window into the foreground and activates the window.")]
    [switch]$SetForegroundWindow,
    [ValidateSet(
        'BOTTOM',
        'NOTOPMOST',
        'TOP',
        'TOPMOST'
    )]
    [Parameter(HelpMessage="Changes the size, position, and Z order of a child, pop-up, or top-level window.")]
    [string]$SetWindowPos
)

$process = Get-Process | ? { 
    $_.Name -like $name -and [int]$_.MainWindowHandle -gt 0 
}

if ($process.length -eq 0) {
    write-host -Foreground RED "Process [${name}] not found."
    exit 1
}

$signatures = '
    [DllImport("user32.dll")] 
    public static extern bool ShowWindowAsync(IntPtr hWnd, int nCmdShow);
    [DllImport("user32.dll")] 
    public static extern int SetForegroundWindow(IntPtr hwnd);
    [DllImport("user32.dll")] 
    public static extern bool SetWindowPos( 
        IntPtr hWnd, 
        IntPtr hWndInsertAfter, 
        int X, 
        int Y, 
        int cx, 
        int cy, 
        uint uFlags); 
';

$windowApi = $null

if (!("Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.WindowAPI" -as [type])) {
    $windowApi = Add-Type -MemberDefinition $signatures -Name WindowAPI -PassThru
} else {
    $windowapi = [Microsoft.PowerShell.Commands.AddType.AutoGeneratedTypes.WindowAPI]
}

if ($SetWindowPos) {
    enum WindowPos { 
        BOTTOM = 1; 
        NOTOPMOST = -2; 
        TOP = 0; 
        TOPMOST = -1;
    }
    $pos = ([WindowPos]$SetWindowPos).value__
    $windowApi::SetWindowPos($process.MainWindowHandle, $ptr, 0, 0, 0, 0, 0x0003) | out-null
    $ptr = New-Object -TypeName System.IntPtr -ArgumentList ($pos)
}

if ($SetForegroundWindow) {
    $windowApi::SetForegroundWindow($process.MainWindowHandle) | out-null
}

if ($ShowWindow) {
    enum CommandShow {
        SW_HIDE = 0;
        SW_NORMAL = 1;
        SW_SHOWMINIMIZED = 2;
        SW_MAXIMIZE = 3;
        SW_SHOWNOACTIVATE = 4;
        SW_SHOW = 5;
        SW_MINIMIZE = 6;
        SW_SHOWMINNOACTIVE = 7;
        SW_SHOWNA = 8;
        SW_RESTORE = 9;
        SW_SHOWDEFAULT = 10;
        SW_FORCEMINIMIZE = 11;
    }
    $cmd = ([CommandShow]$ShowWindow).value__
    $windowApi::ShowWindowAsync($process.MainWindowHandle, $cmd) | out-null
}
